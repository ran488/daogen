// ====================================================================
// DO NOT EDIT THIS FILE. IT HAS BEEN AUTO-GENERATED BY PERSISTINATOR. 
// YOUR CHANGES WILL BE LOST NEXT TIME THE CODE IS GENERATED!
// ====================================================================
package ${daoPackageName};

import ${voPackageName}.${voClassName};

import java.util.ArrayList;
import java.util.List;
import java.sql.*;
import javax.naming.*;
import org.apache.log4j.Logger;


/**
 *
 * @author DaoGen
 * @version cvs: $Id: DaoImplTemplate.vm,v 1.1 2008/03/31 20:01:28 ran488 Exp $
 * 
 */
public class ${daoImplClassName}
 extends BaseDao
 implements ${daoInterfaceName}
{
	protected final static Logger log = Logger.getLogger( ${daoImplClassName}.class );
	
	/** The WHERE clause to narrow down to 1 record by PK fields */
	private final static String SQL_PK_WHERE_CLAUSE = "  WHERE #foreach($field in $primaryKeyFields) $field.colName = ? #if($velocityCount < $numPkFields) AND #end #end ";
	
	private final static String SQL_SELECT = "SELECT #foreach($field in $persistableFields)#if( $velocityCount > 1 ), #end $field.colName #end FROM ${schema}.${dbTableName} ";

	private final static String SQL_INSERT = "INSERT INTO ${schema}.${dbTableName} ( #foreach($field in $persistableFields)#if( $velocityCount > 1 ), #end $field.colName #end ) VALUES ( #foreach($field in $persistableFields)#if( $velocityCount > 1 ), #end ? #end )";

	private final static String SQL_UPDATE = "UPDATE ${schema}.${dbTableName} SET #foreach($field in $persistableFields)#if( $velocityCount > 1 ), #end $field.colName = ? #end " + SQL_PK_WHERE_CLAUSE ;
	
	private final static String SQL_DELETE = "DELETE FROM ${schema}.${dbTableName} " + SQL_PK_WHERE_CLAUSE;
	
	
	
	/** Constructor 
        *   Each call maintains it's own Connection, getting a new
        *   one from the ResourceManager and closing when done. 
        */
	public ${daoImplClassName}() 
	{
		super();
		connectionSupplied  = false;
	}

	/**
	 * Construct the DAO with given connection
         * You maintain Connection. Open it to pass in constructor, and you
         * close it when done.
	 */
	public ${daoImplClassName}(Connection conn)
	{
        super();	
        this._conn = conn;
        connectionSupplied  = true;
	}
	
	public int insert( ${voClassName} vo ) throws NamingException, SQLException
	{
		long start = System.currentTimeMillis();
		PreparedStatement stmt = null;
		int rows;
		
		try {
			if (!connectionSupplied)
                this._conn = ResourceManager.getConnection();

			stmt = _conn.prepareStatement( SQL_INSERT );
			int ii = 1;
#foreach($field in $persistableFields)
			stmt.set${field.psMethodNameFrag}( ii++ , vo.get${field.jProperFieldName}() );
#end
			log.debug( "Executing " + SQL_INSERT + " with VO: " + vo);
		
			rows = stmt.executeUpdate();
			long end = System.currentTimeMillis();
			log.debug( rows + " rows affected. DB operation took (" + (end-start) + " milliseconds)");
		}
		finally {
            ResourceManager.close(stmt);
            if (!connectionSupplied)
                ResourceManager.close(_conn);
		}
		return rows;
	}

	public int update( #foreach ($field in $primaryKeyFields) #if( $velocityCount > 1 ) , #end $field.javaType $field.pkJFieldName #end #if( $numPkFields > 0 ) , #end ${voClassName} vo ) throws NamingException, SQLException
	{
		long start = System.currentTimeMillis();
		PreparedStatement stmt = null;
		int rows;
		
		try {
			if (!connectionSupplied)
                this._conn = ResourceManager.getConnection();
			
			stmt = _conn.prepareStatement( SQL_UPDATE );
			int ii = 1;
#foreach($field in $persistableFields)
			stmt.set${field.psMethodNameFrag}( ii++ , vo.get${field.jProperFieldName}() );
#end
#foreach($field in $primaryKeyFields) 
			stmt.set${field.psMethodNameFrag}( ii++ , vo.get${field.jProperFieldName}() );
#end			
			log.debug( "Executing " + SQL_UPDATE + " with VO: " + vo);
			
			rows = stmt.executeUpdate();
			long end = System.currentTimeMillis();
			log.debug( rows + " rows affected. DB operation took (" + (end-start) + " milliseconds)");
		}
		finally {
            ResourceManager.close(stmt);
            if (!connectionSupplied)
               ResourceManager.close(_conn);
		}
		return rows;
	}
	
	public int delete( ${voClassName} vo ) throws NamingException, SQLException
	{
		long start = System.currentTimeMillis();
		PreparedStatement stmt = null;
		int rows;
		
		try {
			if (!connectionSupplied)
                this._conn = ResourceManager.getConnection();
			
			stmt = _conn.prepareStatement( SQL_DELETE );
			int ii = 1;

#foreach($field in $primaryKeyFields)
			stmt.set${field.psMethodNameFrag}( ii++ , vo.get${field.jProperFieldName}() );
#end
			
			log.debug( "Executing " + SQL_DELETE + " with VO: " + vo);
			
			rows = stmt.executeUpdate();
			long end = System.currentTimeMillis();
			log.debug( rows + " rows affected. DB operation took (" + (end-start) + " milliseconds)");
		}
		finally {
            ResourceManager.close(stmt);
            if (!connectionSupplied)
                ResourceManager.close(_conn);
		}
	
		return rows;
	}

	public List<${voClassName}> findAll() throws NamingException, SQLException
	{
		return this.findByArbitraryWhere("");//no WHERE clause == ALL records!
	}

	public ${voClassName} findByPK(
		#foreach ($field in $primaryKeyFields)
		#if( $velocityCount > 1 ) , #end $field.javaType $field.pkJFieldName
		#end ) throws NamingException, SQLException
	{

		long start = System.currentTimeMillis();
		PreparedStatement stmt = null;
		ResultSet rs = null;
		List<${voClassName}> qResults = null;
		
		try {
			if (!connectionSupplied)
                this._conn = ResourceManager.getConnection();
			
			stmt = _conn.prepareStatement( SQL_SELECT + SQL_PK_WHERE_CLAUSE );
			int ii = 1;
			log.debug( "Executing " + SQL_SELECT + SQL_PK_WHERE_CLAUSE);
			
#foreach ($field in $primaryKeyFields)
			stmt.set${field.psMethodNameFrag}( ii++ , ${field.jFieldName} );
#end
			
			rs = stmt.executeQuery();
			long end = System.currentTimeMillis();
			qResults = getResults(rs);
			log.debug( qResults.size() + " row found. DB query took (" + (end-start) + " milliseconds)");
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
            if (!connectionSupplied)
                ResourceManager.close(_conn);
		}
		// really better only be one, or it isn't a primary key 
		return qResults.get(0);
}
	
#foreach ($column in $persistableFields)
	
	/** Find by $column.colName column */
	public List<${voClassName}> findBy${column.jProperFieldName}( $column.javaType $column.jFieldName ) throws NamingException, SQLException
	{
		long start = System.currentTimeMillis();
		PreparedStatement stmt = null;
		ResultSet rs = null;
		List<${voClassName}> qResults = null;
		
		try {
			if (!connectionSupplied)
                this._conn = ResourceManager.getConnection();
			
			stmt = _conn.prepareStatement( SQL_SELECT + " WHERE ${column.colName} = ? " + orderByClause);
			int ii = 1;
			log.debug( "Executing " + SQL_SELECT + " WHERE ${column.colName} = ? " + orderByClause);
			
			stmt.set${column.psMethodNameFrag}( ii++ , ${column.jFieldName} );

			rs = stmt.executeQuery();
			long end = System.currentTimeMillis();
			qResults = getResults(rs);
			log.debug( qResults.size() + " rows found. DB query took (" + (end-start) + " milliseconds)");		
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
            if (!connectionSupplied)
                ResourceManager.close(_conn);
		}
		
		return qResults;
	}
	
#end
	
	/** Find by some arbitrary WHERE clause */
	public List<${voClassName}> findByArbitraryWhere( String whereClause ) throws NamingException, SQLException
	{
		long start = System.currentTimeMillis();
		PreparedStatement stmt = null;
		ResultSet rs = null;
		List<${voClassName}> qResults = null;
		
		try {
			if (!connectionSupplied)
                this._conn = ResourceManager.getConnection();
			
			stmt = _conn.prepareStatement( SQL_SELECT + whereClause + orderByClause );
			int ii = 1;
			log.debug( "Executing " + SQL_SELECT + whereClause + orderByClause);
			
			rs = stmt.executeQuery();
			long end = System.currentTimeMillis();
			qResults = getResults(rs);
			log.debug( qResults.size() + " rows found. DB query took (" + (end-start) + " milliseconds)");
			
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);            
            if (!connectionSupplied)
                ResourceManager.close(_conn);
		}
		
		return qResults;
	}

	public List<${voClassName}> getResults(ResultSet rs) throws SQLException
    {
		List<${voClassName}> results = new ArrayList<${voClassName}>();
		${voClassName} vo;

		while (rs.next())
		{
			vo = new ${voClassName}();
#foreach($field in $persistableFields)
			vo.set${field.jProperFieldName}( rs.get${field.psMethodNameFrag}("${field.ColName}") ); 
#end
			boolean addedOk = results.add(vo);
		}

		return results;
    }
}
