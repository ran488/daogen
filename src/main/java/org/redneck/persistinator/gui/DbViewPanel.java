/*
 * DbViewPanel.java
 *
 * Created on December 11, 2006, 4:35 PM
 */

package org.redneck.persistinator.gui;

import javax.swing.event.TreeSelectionEvent;
import javax.swing.tree.TreeSelectionModel;

import org.redneck.persistinator.gui.models.DbTreeModel;
import org.redneck.persistinator.log.SimpleLogger;
import org.redneck.persistinator.meta.AbstractTable;
import org.redneck.persistinator.meta.Procedure;
import org.redneck.persistinator.meta.Table;

/**
 *
 * @author  ran488
 */
public class DbViewPanel extends javax.swing.JPanel
        implements javax.swing.event.TreeSelectionListener
{
    private DaoGeneratorGui parent = null;
    private ProjectInfo prjInfo = new ProjectInfo();
    private Object currentValidSelection = null;
    
    /** Creates new form DbViewPanel */
    public DbViewPanel(DaoGeneratorGui parent)
    {
        this.parent = parent;
        this.prjInfo = parent.getProjectInfo();
        initComponents();
    }


    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        scrollPanel = new javax.swing.JScrollPane();
        dbExplorerTree = new javax.swing.JTree();
        // CUSTOM inserted by RAN488
        dbExplorerTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        dbExplorerTree.addTreeSelectionListener(this);
        // END CUSTOM
        buttonPanel = new javax.swing.JPanel();
        clearButton = new javax.swing.JButton();
        customMethodButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        dbExplorerTree.setModel(new DbTreeModel(prjInfo.getJdbcUrl(), prjInfo.getDatabaseMetaData()));
        scrollPanel.setViewportView(dbExplorerTree);

        add(scrollPanel, java.awt.BorderLayout.CENTER);

        clearButton.setText("Clear");
        clearButton.setToolTipText("Clears current selection");
        clearButton.setEnabled(false);
        clearButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clearButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(clearButton);

        customMethodButton.setText("Custom Methods");
        customMethodButton.setToolTipText("Create a custom finder method for this table, which will be included in generated DAO");
        customMethodButton.setEnabled(false);
        customMethodButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                customMethodButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(customMethodButton);

        add(buttonPanel, java.awt.BorderLayout.SOUTH);

    }// </editor-fold>//GEN-END:initComponents

    /** open up a custom query tab with current table or procedure */
    private void customMethodButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_customMethodButtonActionPerformed
    {//GEN-HEADEREND:event_customMethodButtonActionPerformed
        //create the tab through the parent, passing in table info
        //parent.displayCustomQueryTab((AbstractTable)this.currentValidSelection);
        // FIXME: instead launch a new window/wizard type of deal
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new NewMethodFrame((AbstractTable)currentValidSelection).setVisible(true);
            }
        });
    }//GEN-LAST:event_customMethodButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearButtonActionPerformed
    {//GEN-HEADEREND:event_clearButtonActionPerformed
        this.dbExplorerTree.clearSelection();
        this.currentValidSelection = null;
        clearButton.setEnabled(false);
        customMethodButton.setEnabled(false);
    }//GEN-LAST:event_clearButtonActionPerformed

    public void valueChanged(TreeSelectionEvent e)
    {
        Object o = dbExplorerTree.getLastSelectedPathComponent();
        //SimpleLogger.log("Object has been selected: (" + o.getClass().getName() + ") / " +o.toString());
        //parent.switchToOutputTab();
        //break it up in case we need to later, like populating a table or split-form with meta data
        // could have split screen and show more detail on click of anything.
        // on select of table or proc also show a button to say "create custom query method"
        // that will take user to custom query tab with this table or proc passed in. then
        // each table and proc class will have something like an "add custom query" method that
        // adds the custom info to a list or hashtable for that table/proc
        // maybe custom query tab should not show up until a table or proc is selected to
        // avoid the crapage.
        if ((o instanceof org.redneck.persistinator.meta.Table) || (o instanceof org.redneck.persistinator.meta.Procedure))
        {
            SimpleLogger.log("Table or Procedure has been selected: (" + o.getClass().getName() + ") / " +o.toString());
            currentValidSelection = o;
            clearButton.setEnabled(true);
            customMethodButton.setEnabled(true);
        }
        else
        {
            clearButton.setEnabled(false);
            customMethodButton.setEnabled(false);
        }
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton customMethodButton;
    private javax.swing.JTree dbExplorerTree;
    private javax.swing.JScrollPane scrollPanel;
    // End of variables declaration//GEN-END:variables
    
}
